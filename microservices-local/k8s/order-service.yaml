apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  labels:
    app: order-service
    monitoring: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        monitoring: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: order-service
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const url = require('url');
            
            const orders = [
              { id: 1, userId: 1, products: [1, 2], total: 1019.98, status: 'completed' },
              { id: 2, userId: 2, products: [3], total: 9.99, status: 'pending' }
            ];
            
            const server = http.createServer((req, res) => {
              const parsedUrl = url.parse(req.url, true);
              
              res.setHeader('Access-Control-Allow-Origin', '*');
              res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
              res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
              res.setHeader('Content-Type', 'application/json');
              
              if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
              }
              
              if (parsedUrl.pathname === '/health') {
                res.writeHead(200);
                res.end(JSON.stringify({
                  service: 'order-service',
                  status: 'healthy',
                  timestamp: new Date().toISOString()
                }));
              } else if (parsedUrl.pathname === '/orders') {
                res.writeHead(200);
                res.end(JSON.stringify(orders));
              } else if (parsedUrl.pathname.startsWith('/orders/')) {
                const id = parseInt(parsedUrl.pathname.split('/')[2]);
                const order = orders.find(o => o.id === id);
                if (order) {
                  res.writeHead(200);
                  res.end(JSON.stringify(order));
                } else {
                  res.writeHead(404);
                  res.end(JSON.stringify({ error: 'Order not found' }));
                }
              } else {
                res.writeHead(404);
                res.end(JSON.stringify({ error: 'Not found' }));
              }
            });
            
            server.listen(3003, () => {
              console.log('Order Service listening on port 3003');
            });
              { id: 2, productId: 2, userId: 'user2', quantity: 1, status: 'pending' }
            ];

            // Metrics
            const httpRequestsTotal = new client.Counter({
              name: 'http_requests_total',
              help: 'Total HTTP requests',
              labelNames: ['method', 'route', 'status'],
              registers: [register]
            });

            const ordersTotal = new client.Counter({
              name: 'orders_total',
              help: 'Total number of orders',
              labelNames: ['status'],
              registers: [register]
            });

            // Jaeger tracing
            const config = {
              serviceName: 'order-service',
              reporter: {
                collectorEndpoint: 'http://jaeger-collector.observability.svc.cluster.local:14268/api/traces'
              }
            };
            const tracer = jaeger.initTracer(config);

            // Middleware
            app.use(express.json());
            app.use((req, res, next) => {
              res.on('finish', () => {
                httpRequestsTotal.inc({ method: req.method, route: req.path, status: res.statusCode });
              });
              next();
            });

            // Routes
            app.get('/health', (req, res) => {
              res.json({ service: 'order-service', status: 'healthy', timestamp: new Date().toISOString() });
            });

            app.get('/metrics', (req, res) => {
              res.set('Content-Type', register.contentType);
              res.end(register.metrics());
            });

            app.get('/orders', (req, res) => {
              res.json(orders);
            });

            app.post('/orders', (req, res) => {
              const newOrder = {
                id: orders.length + 1,
                ...req.body,
                status: 'pending',
                createdAt: new Date().toISOString()
              };
              orders.push(newOrder);
              ordersTotal.inc({ status: 'pending' });
              res.status(201).json(newOrder);
            });

            app.get('/orders/:id', (req, res) => {
              const order = orders.find(o => o.id === parseInt(req.params.id));
              if (order) {
                res.json(order);
              } else {
                res.status(404).json({ error: 'Order not found' });
              }
            });

            // Start servers
            app.listen(3003, () => console.log('Order Service listening on port 3003'));
            
            // Metrics server
            const metricsApp = express();
            metricsApp.get('/metrics', (req, res) => {
              res.set('Content-Type', register.contentType);
              res.end(register.metrics());
            });
            metricsApp.listen(9090, () => console.log('Metrics server listening on port 9090'));
            EOF
            
            node app.js
        ports:
        - containerPort: 3003
          name: http
        - containerPort: 9090
          name: metrics
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep 'node app.js' | grep -v grep"
          initialDelaySeconds: 120
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep 'node app.js' | grep -v grep"
          initialDelaySeconds: 90
          periodSeconds: 5
        env:
        - name: SERVICE_NAME
          value: "order-service"
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  labels:
    app: order-service
    monitoring: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: NodePort
  ports:
  - port: 3003
    targetPort: 3003
    nodePort: 30003
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: order-service
