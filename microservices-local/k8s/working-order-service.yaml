apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  labels:
    app: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
      - name: order-service
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const url = require('url');
            
            const orders = [
              { id: 1, userId: 1, products: [1, 2], total: 1019.98, status: 'completed' },
              { id: 2, userId: 2, products: [3], total: 9.99, status: 'pending' }
            ];
            
            const server = http.createServer((req, res) => {
              const parsedUrl = url.parse(req.url, true);
              
              res.setHeader('Access-Control-Allow-Origin', '*');
              res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
              res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
              res.setHeader('Content-Type', 'application/json');
              
              if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
              }
              
              if (parsedUrl.pathname === '/health') {
                res.writeHead(200);
                res.end(JSON.stringify({
                  service: 'order-service',
                  status: 'healthy',
                  timestamp: new Date().toISOString()
                }));
              } else if (parsedUrl.pathname === '/orders') {
                res.writeHead(200);
                res.end(JSON.stringify(orders));
              } else if (parsedUrl.pathname.startsWith('/orders/')) {
                const id = parseInt(parsedUrl.pathname.split('/')[2]);
                const order = orders.find(o => o.id === id);
                if (order) {
                  res.writeHead(200);
                  res.end(JSON.stringify(order));
                } else {
                  res.writeHead(404);
                  res.end(JSON.stringify({ error: 'Order not found' }));
                }
              } else {
                res.writeHead(404);
                res.end(JSON.stringify({ error: 'Not found' }));
              }
            });
            
            server.listen(3003, () => {
              console.log('Order Service listening on port 3003');
            });
        ports:
        - containerPort: 3003
          name: http
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  labels:
    app: order-service
spec:
  type: ClusterIP
  ports:
  - port: 3003
    targetPort: 3003
    name: http
  selector:
    app: order-service
