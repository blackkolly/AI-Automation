apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  labels:
    app: auth-service
    monitoring: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        monitoring: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: auth-service
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const url = require('url');
            
            let requestCount = 0;
            
            const server = http.createServer((req, res) => {
              const parsedUrl = url.parse(req.url, true);
              requestCount++;
              
              res.setHeader('Access-Control-Allow-Origin', '*');
              res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
              res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
              res.setHeader('Content-Type', 'application/json');
              
              if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
              }
              
              if (parsedUrl.pathname === '/health') {
                res.writeHead(200);
                res.end(JSON.stringify({
                  service: 'auth-service',
                  status: 'healthy',
                  timestamp: new Date().toISOString()
                }));
              } else if (parsedUrl.pathname === '/metrics') {
                res.writeHead(200, { 'Content-Type': 'text/plain' });
                res.end('# HELP http_requests_total Total HTTP requests\\n# TYPE http_requests_total counter\\nhttp_requests_total ' + requestCount + '\\n');
              } else if (parsedUrl.pathname === '/auth/login' && req.method === 'POST') {
                res.writeHead(200);
                res.end(JSON.stringify({ token: 'mock-jwt-token', user: 'test-user' }));
              } else if (parsedUrl.pathname === '/auth/validate' && req.method === 'POST') {
                res.writeHead(200);
                res.end(JSON.stringify({ valid: true, user: 'test-user' }));
              } else {
                res.writeHead(404);
                res.end(JSON.stringify({ error: 'Not found' }));
              }
            });
            
            server.listen(3001, () => {
              console.log('Auth Service listening on port 3001');
            });

            // Start servers
            app.listen(3001, () => console.log('Auth Service listening on port 3001'));
            
            // Metrics server
            const metricsApp = express();
            metricsApp.get('/metrics', (req, res) => {
              res.set('Content-Type', register.contentType);
              res.end(register.metrics());
            });
            metricsApp.listen(9090, () => console.log('Metrics server listening on port 9090'));
            EOF
            
            node app.js
        ports:
        - containerPort: 3001
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_NAME
          value: "auth-service"
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  labels:
    app: auth-service
    monitoring: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: NodePort
  ports:
  - port: 3001
    targetPort: 3001
    nodePort: 30001
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: auth-service
