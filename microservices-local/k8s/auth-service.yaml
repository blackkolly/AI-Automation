apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  labels:
    app: auth-service
    monitoring: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        monitoring: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: auth-service
        image: node:18-alpine
        command: ["sh", "-c"]
        args:
          - |
            npm install express prom-client jaeger-client opentracing
            cat > app.js << 'EOF'
            const express = require('express');
            const client = require('prom-client');
            const jaeger = require('jaeger-client');

            const app = express();
            const register = new client.Registry();
            
            // Metrics
            const httpRequestsTotal = new client.Counter({
              name: 'http_requests_total',
              help: 'Total HTTP requests',
              labelNames: ['method', 'route', 'status'],
              registers: [register]
            });

            // Jaeger tracing
            const config = {
              serviceName: 'auth-service',
              reporter: {
                collectorEndpoint: 'http://jaeger-collector.observability.svc.cluster.local:14268/api/traces'
              }
            };
            const tracer = jaeger.initTracer(config);

            // Middleware
            app.use((req, res, next) => {
              res.on('finish', () => {
                httpRequestsTotal.inc({ method: req.method, route: req.path, status: res.statusCode });
              });
              next();
            });

            // Routes
            app.get('/health', (req, res) => {
              res.json({ service: 'auth-service', status: 'healthy', timestamp: new Date().toISOString() });
            });

            app.get('/metrics', (req, res) => {
              res.set('Content-Type', register.contentType);
              res.end(register.metrics());
            });

            app.post('/auth/login', (req, res) => {
              res.json({ token: 'mock-jwt-token', user: 'test-user' });
            });

            app.post('/auth/validate', (req, res) => {
              res.json({ valid: true, user: 'test-user' });
            });

            // Start servers
            app.listen(3001, () => console.log('Auth Service listening on port 3001'));
            
            // Metrics server
            const metricsApp = express();
            metricsApp.get('/metrics', (req, res) => {
              res.set('Content-Type', register.contentType);
              res.end(register.metrics());
            });
            metricsApp.listen(9090, () => console.log('Metrics server listening on port 9090'));
            EOF
            
            node app.js
        ports:
        - containerPort: 3001
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_NAME
          value: "auth-service"
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  labels:
    app: auth-service
    monitoring: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: NodePort
  ports:
  - port: 3001
    targetPort: 3001
    nodePort: 30001
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: auth-service
