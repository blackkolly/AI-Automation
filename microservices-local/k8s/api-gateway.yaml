apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  labels:
    app: api-gateway
    monitoring: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        monitoring: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-gateway
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const url = require('url');
            
            let requestCount = 0;
            
            const server = http.createServer((req, res) => {
              const parsedUrl = url.parse(req.url, true);
              requestCount++;
              
              res.setHeader('Access-Control-Allow-Origin', '*');
              res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
              res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
              res.setHeader('Content-Type', 'application/json');
              
              if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
              }
              
              if (parsedUrl.pathname === '/health') {
                res.writeHead(200);
                res.end(JSON.stringify({
                  service: 'api-gateway',
                  status: 'healthy',
                  timestamp: new Date().toISOString()
                }));
              } else if (parsedUrl.pathname === '/metrics') {
                res.writeHead(200, { 'Content-Type': 'text/plain' });
                res.end('# HELP http_requests_total Total HTTP requests\\n# TYPE http_requests_total counter\\nhttp_requests_total ' + requestCount + '\\n');
              } else if (parsedUrl.pathname === '/api/status') {
                res.writeHead(200);
                res.end(JSON.stringify({ 
                  message: 'API Gateway is running locally!',
                  services: {
                    auth: 'http://auth-service:3001',
                    products: 'http://product-service:3002',
                    orders: 'http://order-service:3003'
                  },
                  requests: requestCount
                }));
              } else {
                res.writeHead(404);
                res.end(JSON.stringify({ error: 'Not found' }));
              }
            });
            
            server.listen(3000, () => {
              console.log('API Gateway listening on port 3000');
            });
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_NAME
          value: "api-gateway"
        - name: ENABLE_METRICS
          value: "true"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  labels:
    app: api-gateway
    monitoring: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30000
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: api-gateway
