apiVersion: v1
kind: ConfigMap
metadata:
  name: metrics-test-app
  namespace: microservices
data:
  app.js: |
    const http = require('http');
    
    let requestCount = 0;
    let productViews = 0;
    let orderCount = 0;
    
    const server = http.createServer((req, res) => {
      requestCount++;
      
      res.setHeader('Access-Control-Allow-Origin', '*');
      
      if (req.url === '/metrics') {
        const metrics = 'http_requests_total{service="test-app"} ' + requestCount + '\n' +
                       'product_views_total{service="test-app"} ' + productViews + '\n' +
                       'orders_total{service="test-app"} ' + orderCount + '\n' +
                       'service_up{service="test-app"} 1\n';
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end(metrics);
      } else if (req.url === '/health') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end('{"status":"healthy"}');
      } else if (req.url === '/products') {
        productViews++;
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end('[{"id":1,"name":"Laptop","price":999.99}]');
      } else if (req.url === '/orders') {
        orderCount++;
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end('{"total_orders":' + orderCount + '}');
      } else {
        res.writeHead(404);
        res.end('Not found');
      }
    });
    
    server.listen(3000, () => {
      console.log('Metrics test app running on port 3000');
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-test-app
  namespace: microservices
  labels:
    app: metrics-test-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metrics-test-app
  template:
    metadata:
      labels:
        app: metrics-test-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: app
        image: node:18-alpine
        ports:
        - containerPort: 3000
        command: ["node", "/app/app.js"]
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: app-code
        configMap:
          name: metrics-test-app
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-test-app
  namespace: microservices
  labels:
    app: metrics-test-app
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: metrics-test-app
  ports:
  - name: http
    port: 3000
    targetPort: 3000
