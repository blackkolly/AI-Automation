apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: microservices
spec:
  replicas: 3
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
        - name: order-service
          image: 779066052352.dkr.ecr.us-west-2.amazonaws.com/microservices-platform-prod/order-service:v2.0
          ports:
            - containerPort: 3003
          env:
            - name: PORT
              value: "3003"
            - name: NODE_ENV
              value: "development"
            - name: DEBUG
              value: "*"
            - name: KAFKAJS_NO_PARTITIONER_WARNING
              value: "1"
            - name: DISABLE_KAFKA_CONSUMERS
              value: "true"
            - name: REDIS_HOST
              value: "redis.microservices.svc.cluster.local"
            - name: REDIS_PORT
              value: "6379"
            - name: KAFKA_BROKERS
              value: "kafka.kafka.svc.cluster.local:9092"
            - name: DB_HOST
              value: "postgres.microservices.svc.cluster.local"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "orders"
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: POSTGRES_PASSWORD
            - name: JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: JWT_SECRET
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          # Disabled health checks to prevent premature restarts
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 3003
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 3003
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: microservices
spec:
  selector:
    app: order-service
  ports:
    - port: 3003
      targetPort: 3003
  type: ClusterIP
