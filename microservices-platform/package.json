{
  "name": "microservices-platform",
  "version": "1.0.0",
  "description": "Production-grade microservices platform with GitOps",
  "main": "index.js",
  "scripts": {
    "dev": "concurrently \"npm run dev:auth\" \"npm run dev:gateway\" \"npm run dev:product\" \"npm run dev:order\"",
    "dev:auth": "cd services/auth-service && npm run dev",
    "dev:gateway": "cd services/api-gateway && npm run dev",
    "dev:product": "cd services/product-service && mvn spring-boot:run -Dspring-boot.run.profiles=local",
    "dev:order": "cd services/order-service && npm run dev",
    "install:all": "npm run install:auth && npm run install:gateway && npm run install:order && npm run install:product",
    "install:auth": "cd services/auth-service && npm install",
    "install:gateway": "cd services/api-gateway && npm install",
    "install:order": "cd services/order-service && npm install",
    "install:product": "cd services/product-service && mvn clean install -DskipTests",
    "test": "npm run test:auth && npm run test:gateway && npm run test:order && npm run test:product",
    "test:auth": "cd services/auth-service && npm test",
    "test:gateway": "cd services/api-gateway && npm test",
    "test:order": "cd services/order-service && npm test",
    "test:product": "cd services/product-service && mvn test",
    "test:integration": "cd tests/integration && npm test",
    "test:e2e": "cd tests/e2e && npm test",
    "lint": "npm run lint:auth && npm run lint:gateway && npm run lint:order",
    "lint:auth": "cd services/auth-service && npm run lint",
    "lint:gateway": "cd services/api-gateway && npm run lint",
    "lint:order": "cd services/order-service && npm run lint",
    "logs": "docker-compose -f docker-compose.local.yml logs -f",
    "logs:auth": "cd services/auth-service && npm run logs",
    "logs:gateway": "cd services/api-gateway && npm run logs",
    "logs:order": "cd services/order-service && npm run logs",
    "logs:product": "cd services/product-service && mvn spring-boot:run -Dspring-boot.run.arguments=--logging.level.root=DEBUG",
    "db:setup": "npm run db:create && npm run db:migrate && npm run db:seed",
    "db:create": "node scripts/create-databases.js",
    "db:migrate": "npm run db:migrate:auth && npm run db:migrate:product && npm run db:migrate:order",
    "db:migrate:auth": "cd services/auth-service && npm run migrate",
    "db:migrate:product": "cd services/product-service && mvn flyway:migrate",
    "db:migrate:order": "cd services/order-service && npm run migrate",
    "db:seed": "npm run db:seed:auth && npm run db:seed:product && npm run db:seed:order",
    "db:seed:auth": "cd services/auth-service && npm run seed",
    "db:seed:product": "cd services/product-service && mvn exec:java -Dexec.mainClass='com.microservices.product.SeedData'",
    "db:seed:order": "cd services/order-service && npm run seed",
    "build": "npm run build:auth && npm run build:gateway && npm run build:order && npm run build:product",
    "build:auth": "cd services/auth-service && npm run build",
    "build:gateway": "cd services/api-gateway && npm run build",
    "build:order": "cd services/order-service && npm run build",
    "build:product": "cd services/product-service && mvn clean package",
    "docker:build": "npm run docker:build:auth && npm run docker:build:gateway && npm run docker:build:order && npm run docker:build:product",
    "docker:build:auth": "cd services/auth-service && docker build -t auth-service .",
    "docker:build:gateway": "cd services/api-gateway && docker build -t api-gateway .",
    "docker:build:order": "cd services/order-service && docker build -t order-service .",
    "docker:build:product": "cd services/product-service && docker build -t product-service .",
    "docker:up": "docker-compose -f docker-compose.local.yml up -d",
    "docker:down": "docker-compose -f docker-compose.local.yml down",
    "docker:logs": "docker-compose -f docker-compose.local.yml logs -f",
    "docker:clean": "docker-compose -f docker-compose.local.yml down -v --remove-orphans",
    "health:check": "node scripts/health-check.js",
    "status": "node scripts/service-status.js",
    "monitor": "node scripts/resource-monitor.js",
    "security:scan": "npm audit && cd services/auth-service && npm audit && cd ../api-gateway && npm audit && cd ../order-service && npm audit",
    "deps:check": "npm outdated && cd services/auth-service && npm outdated && cd ../api-gateway && npm outdated && cd ../order-service && npm outdated",
    "clean": "npm run clean:auth && npm run clean:gateway && npm run clean:order && npm run clean:product",
    "clean:auth": "cd services/auth-service && rm -rf node_modules dist",
    "clean:gateway": "cd services/api-gateway && rm -rf node_modules dist",
    "clean:order": "cd services/order-service && rm -rf node_modules dist",
    "clean:product": "cd services/product-service && mvn clean",
    "setup": "npm run install:all && npm run docker:up && sleep 30 && npm run db:setup",
    "start": "npm run docker:up && npm run dev",
    "stop": "npm run docker:down"
  },
  "keywords": [
    "microservices",
    "kubernetes",
    "docker",
    "node.js",
    "spring-boot",
    "kafka",
    "postgresql",
    "redis",
    "prometheus",
    "grafana",
    "jaeger",
    "gitops",
    "argocd"
  ],
  "author": "Your Name",
  "license": "MIT",
  "devDependencies": {
    "concurrently": "^8.2.2",
    "nodemon": "^3.0.1",
    "eslint": "^8.49.0",
    "prettier": "^3.0.3",
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  },
  "dependencies": {
    "dotenv": "^16.3.1"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
}
