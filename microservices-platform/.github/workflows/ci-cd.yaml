name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'kubernetes/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - 'kubernetes/**'

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: microservices-platform-dev
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      auth-service: ${{ steps.changes.outputs.auth-service }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      product-service: ${{ steps.changes.outputs.product-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      kubernetes: ${{ steps.changes.outputs.kubernetes }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          auth-service:
            - 'services/auth-service/**'
          api-gateway:
            - 'services/api-gateway/**'
          product-service:
            - 'services/product-service/**'
          order-service:
            - 'services/order-service/**'
          kubernetes:
            - 'kubernetes/**'

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lint-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        service: [auth-service, api-gateway, order-service]
        include:
          - service: auth-service
            directory: services/auth-service
            runtime: node
          - service: api-gateway
            directory: services/api-gateway
            runtime: node
          - service: order-service
            directory: services/order-service
            runtime: node
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      if: matrix.runtime == 'node'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.directory }}/package-lock.json
    
    - name: Install dependencies
      if: matrix.runtime == 'node'
      run: |
        cd ${{ matrix.directory }}
        npm ci
    
    - name: Run linting
      if: matrix.runtime == 'node'
      run: |
        cd ${{ matrix.directory }}
        npm run lint
    
    - name: Run tests
      if: matrix.runtime == 'node'
      run: |
        cd ${{ matrix.directory }}
        npm run test:ci
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always() && matrix.runtime == 'node'
      with:
        name: test-results-${{ matrix.service }}
        path: ${{ matrix.directory }}/coverage/

  test-product-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.product-service == 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    
    - name: Run tests
      run: |
        cd services/product-service
        mvn clean test
    
    - name: Generate test report
      run: |
        cd services/product-service
        mvn jacoco:report
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-product-service
        path: services/product-service/target/site/jacoco/

  build-and-push:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-test, test-product-service, security-scan]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [auth-service, api-gateway, product-service, order-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ matrix.service }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd services/${{ matrix.service }}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ matrix.service }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  update-manifests:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update Kubernetes manifests
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: .*/auth-service:.*|image: ${{ env.ECR_REGISTRY }}/auth-service:${{ github.sha }}|g" kubernetes/manifests/auth-service.yaml
        sed -i "s|image: .*/api-gateway:.*|image: ${{ env.ECR_REGISTRY }}/api-gateway:${{ github.sha }}|g" kubernetes/manifests/api-gateway.yaml
        sed -i "s|image: .*/product-service:.*|image: ${{ env.ECR_REGISTRY }}/product-service:${{ github.sha }}|g" kubernetes/manifests/product-service.yaml
        sed -i "s|image: .*/order-service:.*|image: ${{ env.ECR_REGISTRY }}/order-service:${{ github.sha }}|g" kubernetes/manifests/order-service.yaml
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add kubernetes/manifests/
        git commit -m "Update image tags to ${{ github.sha }}" || exit 0
        git push

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [update-manifests]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    
    - name: Deploy to staging
      run: |
        kubectl apply -f kubernetes/manifests/ -n microservices
        kubectl rollout status deployment/auth-service -n microservices --timeout=600s
        kubectl rollout status deployment/api-gateway -n microservices --timeout=600s
        kubectl rollout status deployment/product-service -n microservices --timeout=600s
        kubectl rollout status deployment/order-service -n microservices --timeout=600s

  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd tests/integration
        npm ci
    
    - name: Run integration tests
      run: |
        cd tests/integration
        npm run test
      env:
        API_BASE_URL: ${{ secrets.STAGING_API_URL }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: tests/integration/results/

  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name microservices-platform-prod
    
    - name: Deploy to production
      run: |
        kubectl apply -f kubernetes/manifests/ -n microservices
        kubectl rollout status deployment/auth-service -n microservices --timeout=600s
        kubectl rollout status deployment/api-gateway -n microservices --timeout=600s
        kubectl rollout status deployment/product-service -n microservices --timeout=600s
        kubectl rollout status deployment/order-service -n microservices --timeout=600s
    
    - name: Verify deployment
      run: |
        kubectl get pods -n microservices
        kubectl get svc -n microservices
    
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
