apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config-updated
  namespace: monitoring
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'microservices'
        kubernetes_sd_configs:
        - role: service
          namespaces:
            names:
            - microservices
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  microservices-dashboard.json: |-
    {
      "dashboard": {
        "id": null,
        "title": "Microservices Dashboard",
        "tags": ["microservices"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "HTTP Requests Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "legendFormat": "{{service}} - {{method}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec"
              },
              {
                "show": false
              }
            ],
            "xAxis": {
              "show": true
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "http_request_duration_seconds",
                "legendFormat": "{{service}} - Response Time"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds"
              },
              {
                "show": false
              }
            ],
            "xAxis": {
              "show": true
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Service Availability",
            "type": "stat",
            "targets": [
              {
                "expr": "service_up",
                "legendFormat": "{{service}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "nodejs_memory_usage",
                "legendFormat": "{{service}} - Memory"
              }
            ],
            "yAxes": [
              {
                "label": "Bytes"
              },
              {
                "show": false
              }
            ],
            "xAxis": {
              "show": true
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 16
            }
          },
          {
            "id": 5,
            "title": "Business Metrics",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(products_retrieved_total[5m])",
                "legendFormat": "Products Retrieved/sec"
              },
              {
                "expr": "rate(orders_created_total[5m])",
                "legendFormat": "Orders Created/sec"
              }
            ],
            "yAxes": [
              {
                "label": "Operations/sec"
              },
              {
                "show": false
              }
            ],
            "xAxis": {
              "show": true
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 16
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sample-app-with-metrics
  namespace: microservices
data:
  app.js: |-
    const http = require('http');
    const url = require('url');
    
    // Simple metrics storage
    let requestCount = 0;
    let responseTimeSum = 0;
    let responseTimeCount = 0;
    let productsRequested = 0;
    let ordersCreated = 0;
    
    const products = [
      { id: 1, name: 'Laptop', price: 999.99 },
      { id: 2, name: 'Phone', price: 699.99 },
      { id: 3, name: 'Tablet', price: 399.99 }
    ];
    
    const orders = [];
    
    function getMetrics() {
      const avgResponseTime = responseTimeCount > 0 ? (responseTimeSum / responseTimeCount) / 1000 : 0;
      return `# HELP http_requests_total Total HTTP requests
# TYPE http_requests_total counter
http_requests_total{service="sample-app"} ${requestCount}

# HELP http_request_duration_seconds Average response time
# TYPE http_request_duration_seconds gauge  
http_request_duration_seconds{service="sample-app"} ${avgResponseTime.toFixed(3)}

# HELP products_retrieved_total Products retrieved
# TYPE products_retrieved_total counter
products_retrieved_total{service="sample-app"} ${productsRequested}

# HELP orders_created_total Orders created
# TYPE orders_created_total counter
orders_created_total{service="sample-app"} ${ordersCreated}

# HELP service_up Service status
# TYPE service_up gauge
service_up{service="sample-app"} 1

# HELP nodejs_memory_usage Memory usage
# TYPE nodejs_memory_usage gauge
nodejs_memory_usage{service="sample-app"} ${process.memoryUsage().heapUsed}
`;
    }
    
    const server = http.createServer((req, res) => {
      const startTime = Date.now();
      requestCount++;
      
      const parsedUrl = url.parse(req.url, true);
      
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      
      if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
      }
      
      // Metrics endpoint
      if (parsedUrl.pathname === '/metrics') {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end(getMetrics());
        return;
      }
      
      // Health check
      if (parsedUrl.pathname === '/health') {
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify({status: 'healthy'}));
        return;
      }
      
      // API endpoints
      if (parsedUrl.pathname === '/products') {
        productsRequested++;
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(products));
      } else if (parsedUrl.pathname === '/orders' && req.method === 'POST') {
        ordersCreated++;
        const newOrder = {id: orders.length + 1, status: 'created'};
        orders.push(newOrder);
        res.writeHead(201, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(newOrder));
      } else if (parsedUrl.pathname === '/orders') {
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(orders));
      } else {
        res.writeHead(404, {'Content-Type': 'application/json'});
        res.end(JSON.stringify({error: 'Not found'}));
      }
      
      // Record response time
      const responseTime = Date.now() - startTime;
      responseTimeSum += responseTime;
      responseTimeCount++;
    });
    
    server.listen(3000, () => {
      console.log('Sample app with metrics running on port 3000');
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-metrics
  namespace: microservices
  labels:
    app: sample-app-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app-metrics
  template:
    metadata:
      labels:
        app: sample-app-metrics
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: sample-app
        image: node:18-alpine
        ports:
        - containerPort: 3000
        command: ["node"]
        args: ["/app/app.js"]
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: app-code
        configMap:
          name: sample-app-with-metrics
---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-metrics
  namespace: microservices
  labels:
    app: sample-app-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: sample-app-metrics
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: ClusterIP
