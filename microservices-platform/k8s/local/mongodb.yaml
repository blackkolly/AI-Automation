apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: microservices
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:7
          ports:
            - containerPort: 27017
              name: mongo
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "admin"
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: "password123"
            - name: MONGO_INITDB_DATABASE
              value: "microservices"
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
      volumes:
        - name: mongodb-data
          emptyDir: {}
        - name: init-script
          configMap:
            name: mongodb-init
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: microservices
  labels:
    app: mongodb
spec:
  type: ClusterIP
  ports:
    - port: 27017
      targetPort: 27017
      name: mongo
  selector:
    app: mongodb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: microservices
data:
  init.js: |
    // Initialize the microservices database
    db = db.getSiblingDB('microservices');

    // Create products collection with sample data
    db.products.insertMany([
      { _id: ObjectId(), id: 1, name: 'Laptop', category: 'Electronics', price: 999.99, stock: 50, description: 'High-performance laptop for work and gaming' },
      { _id: ObjectId(), id: 2, name: 'Smartphone', category: 'Electronics', price: 599.99, stock: 100, description: 'Latest smartphone with advanced features' },
      { _id: ObjectId(), id: 3, name: 'Headphones', category: 'Audio', price: 199.99, stock: 75, description: 'Wireless noise-canceling headphones' },
      { _id: ObjectId(), id: 4, name: 'Book', category: 'Education', price: 29.99, stock: 200, description: 'Programming fundamentals textbook' },
      { _id: ObjectId(), id: 5, name: 'Coffee Mug', category: 'Kitchen', price: 15.99, stock: 500, description: 'Ceramic coffee mug with tech logo' },
      { _id: ObjectId(), id: 6, name: 'Monitor', category: 'Electronics', price: 299.99, stock: 30, description: '4K USB-C monitor for productivity' },
      { _id: ObjectId(), id: 7, name: 'Keyboard', category: 'Electronics', price: 129.99, stock: 60, description: 'Mechanical keyboard for developers' },
      { _id: ObjectId(), id: 8, name: 'Mouse', category: 'Electronics', price: 79.99, stock: 80, description: 'Ergonomic wireless mouse' }
    ]);

    // Create orders collection with sample data
    db.orders.insertMany([
      { 
        _id: ObjectId(), 
        id: 1001, 
        customer: 'John Doe', 
        email: 'john@example.com',
        status: 'Shipped', 
        total: 1299.98, 
        items: [
          { productId: 1, name: 'Laptop', quantity: 1, price: 999.99 },
          { productId: 7, name: 'Keyboard', quantity: 1, price: 129.99 },
          { productId: 8, name: 'Mouse', quantity: 1, price: 79.99 }
        ],
        date: '2025-08-01',
        shippingAddress: '123 Main St, New York, NY 10001'
      },
      { 
        _id: ObjectId(), 
        id: 1002, 
        customer: 'Jane Smith', 
        email: 'jane@example.com',
        status: 'Processing', 
        total: 799.98, 
        items: [
          { productId: 2, name: 'Smartphone', quantity: 1, price: 599.99 },
          { productId: 3, name: 'Headphones', quantity: 1, price: 199.99 }
        ],
        date: '2025-08-02',
        shippingAddress: '456 Oak Ave, Los Angeles, CA 90210'
      },
      { 
        _id: ObjectId(), 
        id: 1003, 
        customer: 'Bob Johnson', 
        email: 'bob@example.com',
        status: 'Delivered', 
        total: 345.97, 
        items: [
          { productId: 6, name: 'Monitor', quantity: 1, price: 299.99 },
          { productId: 4, name: 'Book', quantity: 1, price: 29.99 },
          { productId: 5, name: 'Coffee Mug', quantity: 1, price: 15.99 }
        ],
        date: '2025-08-03',
        shippingAddress: '789 Pine St, Chicago, IL 60601'
      },
      { 
        _id: ObjectId(), 
        id: 1004, 
        customer: 'Alice Brown', 
        email: 'alice@example.com',
        status: 'Pending', 
        total: 45.98, 
        items: [
          { productId: 4, name: 'Book', quantity: 1, price: 29.99 },
          { productId: 5, name: 'Coffee Mug', quantity: 1, price: 15.99 }
        ],
        date: '2025-08-03',
        shippingAddress: '321 Elm St, Miami, FL 33101'
      }
    ]);

    // Create indexes for better performance
    db.products.createIndex({ "id": 1 }, { unique: true });
    db.products.createIndex({ "category": 1 });
    db.orders.createIndex({ "id": 1 }, { unique: true });
    db.orders.createIndex({ "customer": 1 });
    db.orders.createIndex({ "status": 1 });

    print("Database initialized with sample products and orders");
