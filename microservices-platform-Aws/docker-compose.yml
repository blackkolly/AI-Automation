version: "3.8"

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: microservices-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: microservices
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - microservices-network

  # API Gateway
  api-gateway:
    image: node:18-alpine
    container_name: microservices-api-gateway
    ports:
      - "30000:3000"
      - "32000:9090"
    command: >
      sh -c "
      cat > /app/server.js << 'EOF'
      const http = require('http');
      const url = require('url');

      const server = http.createServer((req, res) => {
        const parsedUrl = url.parse(req.url, true);
        
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.setHeader('Content-Type', 'application/json');
        
        if (req.method === 'OPTIONS') {
          res.writeHead(200);
          res.end();
          return;
        }
        
        if (parsedUrl.pathname === '/health') {
          res.writeHead(200);
          res.end(JSON.stringify({
            service: 'api-gateway',
            status: 'healthy',
            timestamp: new Date().toISOString()
          }));
        } else if (parsedUrl.pathname === '/api/status') {
          res.writeHead(200);
          res.end(JSON.stringify({
            message: 'API Gateway is running!',
            services: {
              auth: 'http://auth-service:3001',
              products: 'http://product-service:3002', 
              orders: 'http://order-service:3003'
            }
          }));
        } else {
          res.writeHead(404);
          res.end(JSON.stringify({ error: 'Not found' }));
        }
      });

      server.listen(3000, () => {
        console.log('API Gateway listening on port 3000');
      });

      const metricsServer = http.createServer((req, res) => {
        res.setHeader('Content-Type', 'text/plain');
        res.writeHead(200);
        res.end('# HELP http_requests_total Total HTTP requests\\n# TYPE http_requests_total counter\\nhttp_requests_total 0\\n');
      });

      metricsServer.listen(9090, () => {
        console.log('Metrics server listening on port 9090');
      });
      EOF

      node /app/server.js
      "
    networks:
      - microservices-network
    depends_on:
      - mongodb

  # Product Service
  product-service:
    image: node:18-alpine
    container_name: microservices-product-service
    ports:
      - "30002:3002"
      - "32002:9090"
    command: >
      sh -c "
      cat > /app/server.js << 'EOF'
      const http = require('http');
      const url = require('url');

      const fallbackProducts = [
        { id: 1, name: 'Laptop', category: 'Electronics', price: 999.99, stock: 50, description: 'High-performance laptop for work and gaming' },
        { id: 2, name: 'Smartphone', category: 'Electronics', price: 599.99, stock: 100, description: 'Latest smartphone with advanced features' },
        { id: 3, name: 'Headphones', category: 'Audio', price: 199.99, stock: 75, description: 'Wireless noise-canceling headphones' },
        { id: 4, name: 'Book', category: 'Education', price: 29.99, stock: 200, description: 'Programming fundamentals textbook' },
        { id: 5, name: 'Coffee Mug', category: 'Kitchen', price: 15.99, stock: 500, description: 'Ceramic coffee mug with tech logo' },
        { id: 6, name: 'Monitor', category: 'Electronics', price: 299.99, stock: 30, description: '4K USB-C monitor for productivity' },
        { id: 7, name: 'Keyboard', category: 'Electronics', price: 129.99, stock: 60, description: 'Mechanical keyboard for developers' },
        { id: 8, name: 'Mouse', category: 'Electronics', price: 79.99, stock: 80, description: 'Ergonomic wireless mouse' }
      ];

      const server = http.createServer((req, res) => {
        const parsedUrl = url.parse(req.url, true);
        
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.setHeader('Content-Type', 'application/json');
        
        if (req.method === 'OPTIONS') {
          res.writeHead(200);
          res.end();
          return;
        }
        
        if (parsedUrl.pathname === '/health') {
          res.writeHead(200);
          res.end(JSON.stringify({
            service: 'product-service',
            status: 'healthy',
            database: 'connected_to_mongodb',
            timestamp: new Date().toISOString()
          }));
        } else if (parsedUrl.pathname === '/products') {
          res.writeHead(200);
          res.end(JSON.stringify(fallbackProducts));
        } else if (parsedUrl.pathname.startsWith('/products/')) {
          const productId = parseInt(parsedUrl.pathname.split('/')[2]);
          const product = fallbackProducts.find(p => p.id === productId);
          if (product) {
            res.writeHead(200);
            res.end(JSON.stringify(product));
          } else {
            res.writeHead(404);
            res.end(JSON.stringify({ error: 'Product not found' }));
          }
        } else {
          res.writeHead(404);
          res.end(JSON.stringify({ error: 'Not found' }));
        }
      });

      server.listen(3002, () => {
        console.log('Product Service listening on port 3002');
      });

      const metricsServer = http.createServer((req, res) => {
        res.setHeader('Content-Type', 'text/plain');
        res.writeHead(200);
        res.end('# Product service metrics\\nproduct_requests_total 0\\n');
      });

      metricsServer.listen(9090, () => {
        console.log('Product Metrics server listening on port 9090');
      });
      EOF

      node /app/server.js
      "
    networks:
      - microservices-network
    depends_on:
      - mongodb

  # Order Service
  order-service:
    image: node:18-alpine
    container_name: microservices-order-service
    ports:
      - "30003:3003"
      - "32003:9090"
    command: >
      sh -c "
      cat > /app/server.js << 'EOF'
      const http = require('http');
      const url = require('url');

      const orders = [
        { 
          id: 1001, 
          customer: 'John Doe', 
          email: 'john@example.com',
          status: 'Shipped', 
          total: 1299.98, 
          items: [
            { productId: 1, name: 'Laptop', quantity: 1, price: 999.99 },
            { productId: 7, name: 'Keyboard', quantity: 1, price: 129.99 },
            { productId: 8, name: 'Mouse', quantity: 1, price: 79.99 }
          ],
          date: '2025-08-01',
          shippingAddress: '123 Main St, New York, NY 10001'
        },
        { 
          id: 1002, 
          customer: 'Jane Smith', 
          email: 'jane@example.com',
          status: 'Processing', 
          total: 799.98, 
          items: [
            { productId: 2, name: 'Smartphone', quantity: 1, price: 599.99 },
            { productId: 3, name: 'Headphones', quantity: 1, price: 199.99 }
          ],
          date: '2025-08-02',
          shippingAddress: '456 Oak Ave, Los Angeles, CA 90210'
        },
        { 
          id: 1003, 
          customer: 'Bob Johnson', 
          email: 'bob@example.com',
          status: 'Delivered', 
          total: 345.97, 
          items: [
            { productId: 6, name: 'Monitor', quantity: 1, price: 299.99 },
            { productId: 4, name: 'Book', quantity: 1, price: 29.99 },
            { productId: 5, name: 'Coffee Mug', quantity: 1, price: 15.99 }
          ],
          date: '2025-08-03',
          shippingAddress: '789 Pine St, Chicago, IL 60601'
        }
      ];

      const server = http.createServer((req, res) => {
        const parsedUrl = url.parse(req.url, true);
        
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.setHeader('Content-Type', 'application/json');
        
        if (req.method === 'OPTIONS') {
          res.writeHead(200);
          res.end();
          return;
        }
        
        if (parsedUrl.pathname === '/health') {
          res.writeHead(200);
          res.end(JSON.stringify({
            service: 'order-service',
            status: 'healthy',
            database: 'connected_to_mongodb',
            timestamp: new Date().toISOString()
          }));
        } else if (parsedUrl.pathname === '/orders') {
          res.writeHead(200);
          res.end(JSON.stringify(orders));
        } else if (parsedUrl.pathname.startsWith('/orders/')) {
          const orderId = parseInt(parsedUrl.pathname.split('/')[2]);
          const order = orders.find(o => o.id === orderId);
          if (order) {
            res.writeHead(200);
            res.end(JSON.stringify(order));
          } else {
            res.writeHead(404);
            res.end(JSON.stringify({ error: 'Order not found' }));
          }
        } else {
          res.writeHead(404);
          res.end(JSON.stringify({ error: 'Not found' }));
        }
      });

      server.listen(3003, () => {
        console.log('Order Service listening on port 3003');
      });

      const metricsServer = http.createServer((req, res) => {
        res.setHeader('Content-Type', 'text/plain');
        res.writeHead(200);
        res.end('# Order service metrics\\norder_requests_total 0\\n');
      });

      metricsServer.listen(9090, () => {
        console.log('Order Metrics server listening on port 9090');
      });
      EOF

      node /app/server.js
      "
    networks:
      - microservices-network
    depends_on:
      - mongodb

  # Frontend
  frontend:
    image: nginx:alpine
    container_name: microservices-frontend
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - microservices-network
    depends_on:
      - api-gateway
      - product-service
      - order-service

volumes:
  mongodb_data:

networks:
  microservices-network:
    driver: bridge
