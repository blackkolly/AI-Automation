name: Microservices Platform CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "services/**"
      - "kubernetes/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 779066052352.dkr.ecr.us-east-1.amazonaws.com
  EKS_CLUSTER_NAME: microservices-platform-prod
  KUBECTL_VERSION: 1.28.0

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      product-service: ${{ steps.changes.outputs.product-service }}
      frontend: ${{ steps.changes.outputs.frontend }}
      k8s: ${{ steps.changes.outputs.k8s }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api-gateway:
              - 'services/api-gateway/**'
            auth-service:
              - 'services/auth-service/**'
            order-service:
              - 'services/order-service/**'
            product-service:
              - 'services/product-service/**'
            frontend:
              - 'frontend/**'
            k8s:
              - 'kubernetes/**'

  test-nodejs-services:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.api-gateway == 'true' ||
      needs.detect-changes.outputs.auth-service == 'true' ||
      needs.detect-changes.outputs.order-service == 'true'
    strategy:
      matrix:
        service: [api-gateway, auth-service, order-service]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          npm ci

      - name: Run linting
        run: |
          cd services/${{ matrix.service }}
          npm run lint || echo "Lint script not found, skipping..."

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          npm test || echo "Test script not found, skipping..."

      - name: Check for security vulnerabilities
        run: |
          cd services/${{ matrix.service }}
          npm audit --audit-level moderate

  test-java-service:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.product-service == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd services/product-service
          ./mvnw clean test

      - name: Run security scan
        run: |
          cd services/product-service
          ./mvnw dependency-check:check || echo "Security scan completed with warnings"

  build-and-push:
    needs: [detect-changes, test-nodejs-services, test-java-service]
    runs-on: ubuntu-latest
    if: always() && (needs.test-nodejs-services.result == 'success' || needs.test-nodejs-services.result == 'skipped') && (needs.test-java-service.result == 'success' || needs.test-java-service.result == 'skipped')
    strategy:
      matrix:
        service:
          [api-gateway, auth-service, order-service, product-service, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [api-gateway, auth-service, order-service, product-service, frontend]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  deploy-to-staging:
    needs: [detect-changes, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to staging namespace
        run: |
          # Create staging namespace if it doesn't exist
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -

          # Update image tags in manifests
          cd kubernetes/manifests

          # Apply manifests to staging
          kubectl apply -f . -n staging

          # Restart deployments with new images
          kubectl set image deployment/api-gateway api-gateway=${{ env.ECR_REGISTRY }}/api-gateway:${{ github.sha }} -n staging
          kubectl set image deployment/auth-service auth-service=${{ env.ECR_REGISTRY }}/auth-service:${{ github.sha }} -n staging
          kubectl set image deployment/order-service order-service=${{ env.ECR_REGISTRY }}/order-service:${{ github.sha }} -n staging
          kubectl set image deployment/product-service product-service=${{ env.ECR_REGISTRY }}/product-service:${{ github.sha }} -n staging
          kubectl set image deployment/frontend frontend=${{ env.ECR_REGISTRY }}/frontend:${{ github.sha }} -n staging

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/api-gateway -n staging --timeout=600s
          kubectl rollout status deployment/auth-service -n staging --timeout=600s
          kubectl rollout status deployment/order-service -n staging --timeout=600s
          kubectl rollout status deployment/product-service -n staging --timeout=600s
          kubectl rollout status deployment/frontend -n staging --timeout=600s

      - name: Run health checks
        run: |
          # Wait for services to be ready
          sleep 30

          # Check service health
          kubectl get pods -n staging
          kubectl get services -n staging

  deploy-to-production:
    needs: [detect-changes, build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Backup current deployment
        run: |
          mkdir -p backup
          kubectl get deployment api-gateway -o yaml > backup/api-gateway-backup.yaml
          kubectl get deployment auth-service -o yaml > backup/auth-service-backup.yaml
          kubectl get deployment order-service -o yaml > backup/order-service-backup.yaml
          kubectl get deployment product-service -o yaml > backup/product-service-backup.yaml
          kubectl get deployment frontend -o yaml > backup/frontend-backup.yaml

      - name: Deploy to production
        run: |
          cd kubernetes/manifests

          # Apply base manifests
          kubectl apply -f .

          # Rolling update with new images
          kubectl set image deployment/api-gateway api-gateway=${{ env.ECR_REGISTRY }}/api-gateway:${{ github.sha }}
          kubectl set image deployment/auth-service auth-service=${{ env.ECR_REGISTRY }}/auth-service:${{ github.sha }}
          kubectl set image deployment/order-service order-service=${{ env.ECR_REGISTRY }}/order-service:${{ github.sha }}
          kubectl set image deployment/product-service product-service=${{ env.ECR_REGISTRY }}/product-service:${{ github.sha }}
          kubectl set image deployment/frontend frontend=${{ env.ECR_REGISTRY }}/frontend:${{ github.sha }}

      - name: Wait for rollout completion
        run: |
          kubectl rollout status deployment/api-gateway --timeout=600s
          kubectl rollout status deployment/auth-service --timeout=600s
          kubectl rollout status deployment/order-service --timeout=600s
          kubectl rollout status deployment/product-service --timeout=600s
          kubectl rollout status deployment/frontend --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for services to stabilize
          sleep 60

          # Comprehensive health check
          kubectl get pods --field-selector=status.phase!=Running

          # Check service endpoints
          kubectl get services
          kubectl get ingress

          # Verify all pods are healthy
          kubectl wait --for=condition=ready pod -l app=api-gateway --timeout=300s
          kubectl wait --for=condition=ready pod -l app=auth-service --timeout=300s
          kubectl wait --for=condition=ready pod -l app=order-service --timeout=300s
          kubectl wait --for=condition=ready pod -l app=product-service --timeout=300s
          kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s

      - name: Smoke tests
        run: |
          # Get LoadBalancer URL
          LB_URL=$(kubectl get service api-gateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          if [ ! -z "$LB_URL" ]; then
            echo "Running smoke tests against $LB_URL"
            
            # Test API Gateway health
            curl -f http://$LB_URL/health || exit 1
            
            # Test auth service through gateway
            curl -f http://$LB_URL/api/auth/health || exit 1
            
            # Test product service through gateway
            curl -f http://$LB_URL/api/products/health || exit 1
            
            # Test order service through gateway
            curl -f http://$LB_URL/api/orders/health || exit 1
            
            echo "All smoke tests passed!"
          else
            echo "LoadBalancer URL not available, skipping external tests"
          fi

  notify:
    needs: [deploy-to-production, deploy-to-staging]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ needs.deploy-to-production.result == 'success' && 'success' || 'failure' }}
          text: |
            Deployment Status: ${{ needs.deploy-to-production.result == 'success' && '✅ SUCCESS' || '❌ FAILED' }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
