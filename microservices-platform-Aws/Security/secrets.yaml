apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: microservices
type: Opaque
data:
  # Base64 encoded values - replace with actual encoded secrets
  jwt-secret: c2VjcmV0LWp3dC1rZXk= # secret-jwt-key
  db-password: cGFzc3dvcmQxMjM= # password123
  api-key: YWJjZGVmZ2hpams= # abcdefghijk
---
apiVersion: v1
kind: Secret
metadata:
  name: auth-secrets
  namespace: microservices
type: Opaque
data:
  # Base64 encoded values
  oauth-client-secret: bXlzZWNyZXRjbGllbnQ= # mysecretclient
  encryption-key: bXlzZWNyZXRlbmNyeXB0aW9ua2V5 # mysecretencryptionkey
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-config
  namespace: microservices
data:
  security.properties: |
    # Security configuration
    cors.allowed.origins=http://localhost:3000,https://yourdomain.com
    rate.limit.requests.per.minute=100
    session.timeout.minutes=30
    password.policy.min.length=8
    password.policy.require.special.chars=true

  rate-limiting.yaml: |
    rate_limits:
      - actions:
        - key: remote_address
        limit:
          requests_per_unit: 100
          unit: minute

  cors.yaml: |
    cors:
      allow_origin_string_match:
        - prefix: "http://localhost"
        - prefix: "https://yourdomain.com"
      allow_methods:
        - GET
        - POST
        - PUT
        - DELETE
      allow_headers:
        - "authorization"
        - "content-type"
        - "x-request-id"
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: monitoring
type: Opaque
data:
  # Base64 encoded values
  grafana-admin-password: YWRtaW4xMjM= # admin123
  prometheus-password: cHJvbWV0aGV1czEyMw== # prometheus123
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: microservices
type: kubernetes.io/tls
data:
  # Replace with actual certificate data
  tls.crt: LS0tLS1CRUdJTi... # Your certificate
  tls.key: LS0tLS1CRUdJTi... # Your private key
